# -*- coding: utf-8 -*-
"""examenseries

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SwXO2_1G8hFXeZLcopxzxBC63Y8Jsgl5
"""

# ARIMA Modeling of log(PDI) from Gujaratiâ€™s Econometrics

# STEP 1: Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.arima.model import ARIMA
import statsmodels.api as sm

# STEP 2: Upload and read Excel file
from google.colab import files
uploaded = files.upload()  # Upload 'Macroeconomic_Data_USA.xlsx'

# STEP 3: Load data and transform
file_name = list(uploaded.keys())[0]
data = pd.read_excel(file_name)

# Create datetime index by quarters
data['Date'] = pd.date_range(start='1970-01-01', periods=len(data), freq='Q')
data.set_index('Date', inplace=True)

# Log transformation of Personal Disposable Income (PDI)
data['log_PDI'] = np.log(data['PDI'])
log_pdi = data['log_PDI']

# STEP 4: Plot original log(PDI)
plt.figure(figsize=(10,4))
plt.plot(log_pdi)
plt.title("Log of Personal Disposable Income (PDI)")
plt.xlabel("Date")
plt.ylabel("log(PDI)")
plt.grid(True)
plt.show()

# STEP 5: Augmented Dickey-Fuller Test (stationarity)
adf_result = adfuller(log_pdi)
print("ADF Statistic:", adf_result[0])
print("p-value:", adf_result[1])
print("Critical Values:", adf_result[4])

# STEP 6: Differencing to achieve stationarity
log_pdi_diff = log_pdi.diff().dropna()

# Plot differenced series
plt.figure(figsize=(10,4))
plt.plot(log_pdi_diff)
plt.title("Differenced log(PDI)")
plt.xlabel("Date")
plt.grid(True)
plt.show()

# ADF Test after differencing
adf_result_diff = adfuller(log_pdi_diff)
print("ADF Statistic (after differencing):", adf_result_diff[0])
print("p-value (after differencing):", adf_result_diff[1])
print("Critical Values:", adf_result_diff[4])

# STEP 7: ACF and PACF plots
fig, ax = plt.subplots(1,2, figsize=(14,4))
sm.graphics.tsa.plot_acf(log_pdi_diff, lags=20, ax=ax[0])
sm.graphics.tsa.plot_pacf(log_pdi_diff, lags=20, ax=ax[1])
plt.show()

# STEP 8: Fit ARIMA model (example: ARIMA(1,1,1))
model = ARIMA(log_pdi, order=(1,1,1))
model_fit = model.fit()
print(model_fit.summary())

# STEP 9: Diagnostics
model_fit.plot_diagnostics(figsize=(12,8))
plt.show()

# STEP 10: Forecasting future values
forecast_steps = 8
forecast = model_fit.get_forecast(steps=forecast_steps)
forecast_ci = forecast.conf_int()

# Plot forecast with confidence intervals
plt.figure(figsize=(10,4))
plt.plot(log_pdi, label='Observed')
plt.plot(forecast.predicted_mean, label='Forecast', color='red')
plt.fill_between(forecast_ci.index,
                 forecast_ci.iloc[:, 0],
                 forecast_ci.iloc[:, 1], color='pink', alpha=0.3)
plt.title("Forecast vs Observed log(PDI)")
plt.legend()
plt.grid(True)
plt.show()