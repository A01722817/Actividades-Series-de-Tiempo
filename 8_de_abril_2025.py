# -*- coding: utf-8 -*-
"""8 de Abril 2025

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zbFOGfXKGqrn64kXozRDNewH2oTZecxs
"""

# Import required libraries
import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf

# Download data for TSLA, NVDA, and META from November 29, 2019 to today
start_date = "2019-11-29"
end_date = "2025-04-08"
tickers = ['TSLA', 'NVDA', 'META']

# Fetch historical data
data = yf.download(tickers, start=start_date, end=end_date)

# Check for 'Adj Close'; if not available, use 'Close'
if 'Adj Close' in data.columns:
    stock_data = data['Adj Close']
else:
    stock_data = data['Close']

# Plot stock prices
plt.figure(figsize=(12, 6))
for ticker in tickers:
    plt.plot(stock_data[ticker], label=ticker)
plt.title('Stock Prices: TSLA, NVDA, META')
plt.xlabel('Date')
plt.ylabel('Adjusted Closing Price')
plt.legend()
plt.show()

# Calculate daily returns
returns = stock_data.pct_change().dropna()

# Plot daily returns
plt.figure(figsize=(12, 6))
for ticker in tickers:
    plt.plot(returns[ticker], label=f'{ticker} Returns')
plt.title('Daily Returns: TSLA, NVDA, META')
plt.xlabel('Date')
plt.ylabel('Daily Return')
plt.legend()
plt.show()

# Generate Random Walk based on returns
random_walks = {}
for ticker in tickers:
    random_walks[ticker] = stock_data[ticker].iloc[0] * np.exp(np.cumsum(returns[ticker]))

# Plot Random Walk vs Real Prices
plt.figure(figsize=(12, 6))
for ticker in tickers:
    plt.plot(random_walks[ticker], linestyle='--', label=f'{ticker} Random Walk')
    plt.plot(stock_data[ticker], label=f'{ticker} Actual Price')
plt.title('Random Walk vs Actual Prices')
plt.xlabel('Date')
plt.ylabel('Adjusted Closing Price')
plt.legend()
plt.show()

# Augmented Dickey-Fuller (ADF) Test Function
def adf_test(series, name='Series'):
    print(f'\n>>> ADF Test for {name}')
    result = adfuller(series)
    print(f'ADF Statistic: {result[0]:.4f}')
    print(f'p-value: {result[1]:.4f}')
    if result[1] < 0.05:
        print(f'{name} is Stationary')
    else:
        print(f'{name} has a Unit Root (Non-Stationary)')

# Run ADF test on prices and returns
for ticker in tickers:
    adf_test(stock_data[ticker], f'{ticker} Price')
    adf_test(returns[ticker], f'{ticker} Returns')

# Plot ACF and PACF for each stock
for ticker in tickers:
    plt.figure(figsize=(12, 5))
    plot_acf(stock_data[ticker].dropna(), lags=50)
    plt.title(f'ACF - {ticker}')
    plt.show()

    plt.figure(figsize=(12, 5))
    plot_pacf(stock_data[ticker].dropna(), lags=50)
    plt.title(f'PACF - {ticker}')
    plt.show()